
 - the performance test is very different if you do it on Xcode or on command line with -O3
 - to circumvent the slow down with >>= in Double::AddTo, represent a Double as a BitSet, where the first bs represent the mantissa and the others the part > 1
 - make sure that Double::AddTo does not alter the content of *addend
 - if you run  void SpeedTestUnsignedIntAddTo and instead of calling once (A[s]).SubstractTo(&(B[s]), &carry) you call it twice, the execution time does not change and it stays smaller than the executio time without bits -> The gillespie simulation should be improved by the approach with bits
 - to handle reaal-values ks:
    * rescale all ks by \sum_i k_i
    * now all k_i are in [0,1]
    * say that k_i is a random variable distributed in [0,1]: this takes into account the fluctuations on ks
    * replace k_i with a varaible distributed according to a discrete distribution: k_i = 0 (1) with probability p(0) ((1)): p(0), p(1) are chosen in such a way that <k_i> for the discrete and real varaible are the same
    * simulate with multispin coding the model with the discrete k_is, by drawing 64 samples, where each sample has a different set of random k_is and differrent initial conditions 